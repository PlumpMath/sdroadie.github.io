<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Jeremy Neal</title>
 <link href="http://sdroadie.github.io/atom.xml" rel="self"/>
 <link href="http://sdroadie.github.io/"/>
 <updated>2015-01-12T11:38:22-05:00</updated>
 <id>http://sdroadie.github.io</id>
 <author>
   <name>Jeremy Neal</name>
   <email>jneal1992@gmail.com</email>
 </author>

 
 <entry>
   <title>Learning Rails, Day 1</title>
   <link href="http://sdroadie.github.io/ruby/2015/01/11/learning-rails/"/>
   <updated>2015-01-11T00:00:00-05:00</updated>
   <id>http://sdroadie.github.io/ruby/2015/01/11/learning-rails</id>
   <content type="html">&lt;p&gt;I noticed a trend. Clojure is awesome. And most Clojurists seem to use Rails. As such, I thought it would be worth
investigating for myself.&lt;/p&gt;

&lt;p&gt;As far as scripting languages go, I encountered Python first, and I loved it for its simplicity. Very few languages are
as readable and make expressing complicated ideas easy. At least, at first. Anyway, I never bothered with Ruby seriously.
It didn&amp;#39;t seem that there was anything it offered that Python didn&amp;#39;t. And I already knew Python pretty well. Overall,
it seemed that Python was used for any number of things: data science, SysOps, computer vision. There seemed to be no
reason to spend time learning a new language when I could just become more proficient in the one I already knew.&lt;/p&gt;

&lt;p&gt;Still, something about Rails struck a chord with me. It&amp;#39;s such an enormous thing to learn, yet people swear by it.
Today, after hours of messing around with the awesome &lt;a href=&quot;https://overtone.github.io&quot;&gt;Overtone&lt;/a&gt; library, I decided to take
a break from Clojure for the day and try something else. I looked up Michael Hartl&amp;#39;s well-known
&lt;a href=&quot;https://www.railstutorial.org&quot;&gt;Rails tutorial&lt;/a&gt;. I&amp;#39;m only through two chapters, but even so, I think I get it.&lt;/p&gt;

&lt;p&gt;Rails is big, but it is also powerful. Without the scaffolding, it would be a beast to wrap one&amp;#39;s brain around. Either way,
the way it is structured is fantastic. Even after a few hours, what I&amp;#39;ve learned just makes sense.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m really excited to learn more. But that&amp;#39;s all for today!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Clojure</title>
   <link href="http://sdroadie.github.io/clojure/2015/01/11/learning-clojure/"/>
   <updated>2015-01-11T00:00:00-05:00</updated>
   <id>http://sdroadie.github.io/clojure/2015/01/11/learning-clojure</id>
   <content type="html">&lt;p&gt;About a year back, I took a programming languages class. I think it was a
pretty standard course: boot camp style introduction to several languages
across several paradigms. I found two things interesting. The first was formal
grammars. I&amp;#39;d never thought of languages in that regard. Even when studying
natural languages (I&amp;#39;ve taken a bit of Spanish and Arabic), I didn&amp;#39;t think
of them in terms of the formal grammars that structured the language. Anyway,
I thought it was really interesting that you could describe languages in
such a structured, unambiguous way.&lt;/p&gt;

&lt;p&gt;The other thing that I found interesting, and is really the point of this
post, were functional languages. We covered Common Lisp and Haskell. It was
an eye-opening experience. Most of the languages I had used up until then
(Ruby, Python, Java, C) were fairly similar in how they approached problems.
Sure, some languages had dynamic typing, others were compiled. But how you
actually tried to solve problems was often focused on how to structure your
code to attack a problem.&lt;/p&gt;

&lt;p&gt;The thing I found interesting about Haskell, Common Lisp, and now Clojure,
was that you don&amp;#39;t focus on the actual data you have to deal with. This is
less true with Haskell, due to its rigid but powerful type system. With Lisps,
data and code are one in the same. And when dealing with collections, it
doesn&amp;#39;t matter if you&amp;#39;re dealing with a hash map or a list. It&amp;#39;s liberating.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m really focusing on learning Clojure. I think it will be a powerful
complement to Ruby and Python. There&amp;#39;s also the possibility that it will be
the only language I need to use, as you can target the JVM, CLR, browsers,
mobile, etc. It just feels like a more powerful tool.&lt;/p&gt;

&lt;h3&gt;Edits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Meant CLR, not CLI. It&amp;#39;s a runtime, not an interface (or whatever else &amp;#39;I&amp;#39; could stand for).&lt;/li&gt;
&lt;li&gt;Note: a bunch of things I&amp;#39;ve said are probably misinformed. I&amp;#39;m learning here...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
