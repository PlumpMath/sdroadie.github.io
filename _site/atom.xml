<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Jeremy Neal</title>
 <link href="http://sdroadie.github.io/atom.xml" rel="self"/>
 <link href="http://sdroadie.github.io/"/>
 <updated>2015-02-17T20:03:55-05:00</updated>
 <id>http://sdroadie.github.io</id>
 <author>
   <name>Jeremy Neal</name>
   <email>jneal1992@gmail.com</email>
 </author>

 
 <entry>
   <title>Deploying Jekyll with Travis CI</title>
   <link href="http://sdroadie.github.io/2015/02/17/jekyll-deployment/"/>
   <updated>2015-02-17T00:00:00-05:00</updated>
   <id>http://sdroadie.github.io/2015/02/17/jekyll-deployment</id>
   <content type="html">&lt;p&gt;I like Jekyll. It&amp;#39;s a clean, simple piece of software that makes hosting blogs
painless. I use it for this site, and some others as well. I just built a site
for my girlfriend &lt;strong&gt;(she&amp;#39;s an actress in the Baltimore area.
Check &lt;a href=&quot;http://martharobichaud.com&quot;&gt;her&lt;/a&gt; out if that interests you)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When I was building her site, the traditional route would have been to use 
something like Wordpress or some other CMS, as she would need to edit content 
after the fact. Alternatively, I could implement my own CMS for her. I didn&amp;#39;t 
like either of these options. I really dislike Wordpress for a number of 
reasons, and I don&amp;#39;t have the time to write such a complicated system, as I&amp;#39;m
in my last semester of my bachelor&amp;#39;s. Instead, I chose to use Jekyll.&lt;/p&gt;

&lt;p&gt;For the most part, Jekyll was fine, aside from the user-friendliness. She&amp;#39;s not
a developer, and expecting her to use the command-line would have been absurd.
So here&amp;#39;s what I did to get her site up and running.&lt;/p&gt;

&lt;h2&gt;Create a Github repo.&lt;/h2&gt;

&lt;p&gt;There&amp;#39;s nothing particularly private on her site, putting everything in a public
Github repo was easiest.&lt;/p&gt;

&lt;h2&gt;Deploy with Travis CI.&lt;/h2&gt;

&lt;p&gt;This website could have been hosted on Github pages, but for particular reasons,
I chose to host her site on Namecheap. This makes the build process more
complicated. On the &lt;a href=&quot;http://jekyllrb.com/docs/deployment-methods/&quot;&gt;Jekyll&lt;/a&gt; site,
they list a number of ways of deploying. Since I didn&amp;#39;t want her to have to
touch any of the tools, I chose to deploy with &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The setup for this was pretty easy, but I ran into a few problems that might not
be immediately straightforward to solve. First, you need to hook up the repo to
Travis. This is covered in a number of places.&lt;/p&gt;

&lt;p&gt;I wanted to upload this site over FTP, and this required using a username and
password. I was immediately worried that this would be sitting in my repo, which
is dangerous! However, Travis is awesome and provides a way of encrypting your
credentials for deployment.&lt;/p&gt;

&lt;p&gt;In my case, I needed to include my FTP username and password. After installing
the Travis gem, running the following commands encrypts your keys and stores
them in .travis.yml, allowing you to call them without exposing them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;travis encrypt --add &lt;span class=&quot;nv&quot;&gt;FTP_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ftp_username
travis encrypt --add &lt;span class=&quot;nv&quot;&gt;FTP_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;FTP_PASSWORD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Within your build instructions, you can call these values by name. I did just
this to deploy the _site directory to the web host.&lt;/p&gt;

&lt;p&gt;In the after_success section of .travis.yml, add the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./_site &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; find . -type f -exec curl -u &lt;span class=&quot;nv&quot;&gt;$FTP_SUSER&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$FTP_PASSWORD&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--ftp-create-dirs -T &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; ftp://my_website.com/public_html/&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case you are unsure, this will change the context to the site directory, find
all files and upload them to the public_html directory of the host using curl.&lt;/p&gt;

&lt;h2&gt;Content with Prose.io.&lt;/h2&gt;

&lt;p&gt;As I said before, my girlfriend is not a technical user. I don&amp;#39;t expect her to
open a text editor and use Markdown (though it is quite easy) just to add new
content to her site. Using &lt;a href=&quot;http://prose.io&quot;&gt;Prose.io&lt;/a&gt;, she can easily add
images, blog posts, or any other content, without having to play around with git
commands, text editors, etc.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Rails, Day 1</title>
   <link href="http://sdroadie.github.io/ruby/2015/01/11/learning-rails/"/>
   <updated>2015-01-11T00:00:00-05:00</updated>
   <id>http://sdroadie.github.io/ruby/2015/01/11/learning-rails</id>
   <content type="html">&lt;p&gt;I noticed a trend. Clojure is awesome. And most Clojurists seem to use Rails. As such, I thought it would be worth
investigating for myself.&lt;/p&gt;

&lt;p&gt;As far as scripting languages go, I encountered Python first, and I loved it for its simplicity. Very few languages are
as readable and make expressing complicated ideas easy. At least, at first. Anyway, I never bothered with Ruby seriously.
It didn&amp;#39;t seem that there was anything it offered that Python didn&amp;#39;t. And I already knew Python pretty well. Overall,
it seemed that Python was used for any number of things: data science, SysOps, computer vision. There seemed to be no
reason to spend time learning a new language when I could just become more proficient in the one I already knew.&lt;/p&gt;

&lt;p&gt;Still, something about Rails struck a chord with me. It&amp;#39;s such an enormous thing to learn, yet people swear by it.
Today, after hours of messing around with the awesome &lt;a href=&quot;https://overtone.github.io&quot;&gt;Overtone&lt;/a&gt; library, I decided to take
a break from Clojure for the day and try something else. I looked up Michael Hartl&amp;#39;s well-known
&lt;a href=&quot;https://www.railstutorial.org&quot;&gt;Rails tutorial&lt;/a&gt;. I&amp;#39;m only through two chapters, but even so, I think I get it.&lt;/p&gt;

&lt;p&gt;Rails is big, but it is also powerful. Without the scaffolding, it would be a beast to wrap one&amp;#39;s brain around. Either way,
the way it is structured is fantastic. Even after a few hours, what I&amp;#39;ve learned just makes sense.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m really excited to learn more. But that&amp;#39;s all for today!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Clojure</title>
   <link href="http://sdroadie.github.io/clojure/2015/01/11/learning-clojure/"/>
   <updated>2015-01-11T00:00:00-05:00</updated>
   <id>http://sdroadie.github.io/clojure/2015/01/11/learning-clojure</id>
   <content type="html">&lt;p&gt;About a year back, I took a programming languages class. I think it was a
pretty standard course: boot camp style introduction to several languages
across several paradigms. I found two things interesting. The first was formal
grammars. I&amp;#39;d never thought of languages in that regard. Even when studying
natural languages (I&amp;#39;ve taken a bit of Spanish and Arabic), I didn&amp;#39;t think
of them in terms of the formal grammars that structured the language. Anyway,
I thought it was really interesting that you could describe languages in
such a structured, unambiguous way.&lt;/p&gt;

&lt;p&gt;The other thing that I found interesting, and is really the point of this
post, were functional languages. We covered Common Lisp and Haskell. It was
an eye-opening experience. Most of the languages I had used up until then
(Ruby, Python, Java, C) were fairly similar in how they approached problems.
Sure, some languages had dynamic typing, others were compiled. But how you
actually tried to solve problems was often focused on how to structure your
code to attack a problem.&lt;/p&gt;

&lt;p&gt;The thing I found interesting about Haskell, Common Lisp, and now Clojure,
was that you don&amp;#39;t focus on the actual data you have to deal with. This is
less true with Haskell, due to its rigid but powerful type system. With Lisps,
data and code are one in the same. And when dealing with collections, it
doesn&amp;#39;t matter if you&amp;#39;re dealing with a hash map or a list. It&amp;#39;s liberating.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m really focusing on learning Clojure. I think it will be a powerful
complement to Ruby and Python. There&amp;#39;s also the possibility that it will be
the only language I need to use, as you can target the JVM, CLR, browsers,
mobile, etc. It just feels like a more powerful tool.&lt;/p&gt;

&lt;h3&gt;Edits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Meant CLR, not CLI. It&amp;#39;s a runtime, not an interface (or whatever else &amp;#39;I&amp;#39; could stand for).&lt;/li&gt;
&lt;li&gt;Note: a bunch of things I&amp;#39;ve said are probably misinformed. I&amp;#39;m learning here...&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
